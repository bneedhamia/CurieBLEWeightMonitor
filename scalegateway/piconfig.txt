Configuration of my Raspberry Pi 3 for Node.js BLE development
Brad Needham

Install Raspbian:
Install Noobs on a 16GB MiniSD card for the Pi.
Connect the Pi to an HDMI monitor, keyboard, and mouse.
Connect the Pi to power.
Select Raspbian.
Click WiFi and choose the hotspot to connect to and its password.
Click Install.
Wait for Raspbian to install and reboot.
Once it reboots, it will come up as a graphical interface, auto-logged in as pi.

Setup Raspberry Preferences:
menu / preferences / Raspberry Pi Configuration...
Select the Localization tab
 Locale: USA English
 Timezone: US Pacific
 Keyboard: US English
 WiFi: US
 Click OK
Agree to reboot.

(Re)Setup the Wifi:
Click the networking icon: the two-screen icon in the upper right of the screen.
Wait for it to scan for Access points.
Click on the one you want to connect to.
Enter the password for that WiFi access point.
Wait for the WiFi icon to appear, then wait for that icon to become steady (vs. blinking).

Force update of the date and time, so that network browsing will work:
$ sudo ntpd -qg
Double-check that the date and time in the upper-right of the screen is now correct.
Open the Web Browser (earth and pointer icon) and check that you can view www.google.com

Set up git and clone the CurieBLEWeightMonitor repository:
$ git config --global user.name "your name"    (use your first and last name)
$ git config --global user.email yourEmail@wherever  (use your email address)
$ cd Documents
$ git clone https://github.com/bneedhamia/CurieBLEWeightMonitor

Update the Bluetooth support package, bluez.  The instructions below are a combination of:
- https://learn.adafruit.com/install-bluez-on-the-raspberry-pi/installation
- http://www.jaredwolff.com/blog/get-started-with-bluetooth-low-energy/
Browse to http://www.bluez.org/download/
Click on the link under "User Space Bluez Package" labeled something like bluez-5.40.tar.xz
Wait for that download to complete.
$ cd Downloads
$ tar xvf bluez-5.40.tar.xz
$ rm bluez-5.40-tar.xz
$ mv bluez-5.40 ~
$ cd ~/bluez-5.40
$ sudo apt-get update  (this takes several minutes)
$ sudo apt-get install -y libusb-dev libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev
$ ./configure
$ make >~/make.log 2>&1  (this takes several minutes. Examine ~/make.log for errors.)
$ sudo make install
Reboot.

Just as JaredWolff says, the install didn't copy gatttool. Test and fix that:
$ cd bluez-5.40 (or whatever your bluez version is)
$ sudo ls -l /usr/local/bin/gat*
ls: cannot access /usr/local/bin/gat*: No such file or directory
$ sudo cp attrib/gatttool /usr/local/bin/

Check that the Bluetooth service is installed and running:
$ systemctl status bluetooth
  bluetooth.service - Bluetooth service
   Loaded: loaded (/lib/systemd/system/bluetooth.service; enabled)
   Active: active (running) since Sun 2016-06-26 15:45:31 PDT; 10min ago
     Docs: man:bluetoothd(8)
 Main PID: 716 (bluetoothd)
   Status: "Running"
   CGroup: /system.slice/bluetooth.service
           └─716 /usr/local/libexec/bluetooth/bluetoothd

Test whether you can read a BLE gatt from a BLE device:
Make sure your BLE device is turned on, then:
$ sudo hcitool lescan
LE Scan ...
98:4F:EE:0D:04:B1 K9 Kilos
98:4F:EE:0D:04:B1 (unknown)
^C to exit the scan
$ sudo gatttool -b 98:4F:EE:0D:04:B1 -I    (use the BLE Mac address of your device)
> connect
Attempting to connect to 98:4F:EE:0D:04:B1
Connection successful
> char-desc
handle: 0x0001, uuid: 00002800-0000-1000-8000-00805f9b34fb
handle: 0x0002, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0003, uuid: 00002a00-0000-1000-8000-00805f9b34fb
handle: 0x0004, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0005, uuid: 00002a01-0000-1000-8000-00805f9b34fb
handle: 0x0006, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0007, uuid: 00002a04-0000-1000-8000-00805f9b34fb
handle: 0x0008, uuid: 00002800-0000-1000-8000-00805f9b34fb
handle: 0x0009, uuid: 00002800-0000-1000-8000-00805f9b34fb
handle: 0x000a, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x000b, uuid: 00002a9e-0000-1000-8000-00805f9b34fb
handle: 0x000c, uuid: 00002902-0000-1000-8000-00805f9b34fb
handle: 0x000d, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x000e, uuid: 00002a9d-0000-1000-8000-00805f9b34fb
handle: 0x000f, uuid: 00002902-0000-1000-8000-00805f9b34fb
> char-read-hnd 0001
Characteristic value/descriptor: 00 18 
> exit

Next we'll install Node.js

DON'T install the package 'node', because that's an old packet radio app
that has nothing to do with Node.js

Remove the existing installation of Node.js:
$ sudo apt-get --purge remove node
$ sudo apt-get --purge remove nodejs-legacy
$ sudo apt-get --purge remove nodejs

Following an instruction at https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
arrange to get an up-to-date ARM version of Node.js by telling your Linux package manager about
a repository that contains it:
$ curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -   (this takes a few minutes)

Follow the instructions at https://www.npmjs.com/package/raspberry to update Node.js:
$ sudo apt-get update
$ sudo apt-get upgrade   (Note: this step will upgrade many things in your Raspbian installation)
$ sudo apt-get install nodejs
Reboot

Test the installations of Node.js and npm (Node Package Manager):
$ node -v (it should respond with something like "v4.4.6")
$ npm -v  (it should respond with something like "2.15.5")

Install the Node.js BLE package, noble. I followed instructions at https://github.com/sandeepmistry/noble
$ sudo apt-get install bluetooth bluez libbluetooth-dev libudev-dev
$ cd (so noble, below, gets installed in the home directory. Npm installs into the current directory.)
$ npm install noble           (this takes a minute)
Reboot, just out of superstition.

Give Node.js permission to access the Bluetooth adapter:
$ sudo setcap cap_net_raw+eip $(eval readlink -f `which node`)

Do a simple test of noble:
Make sure a BLE device is on and in range of the Raspberry Pi.
$ cd ~/node_modules/noble
$ node test (that should output some info about the BLE device, its services, and gatts).

test.js in that noble folder is a good example of how to use noble to communicate
with a BLE device (actually, I found the documentation at the Noble site to be more useful).

